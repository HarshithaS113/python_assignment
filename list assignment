{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8b200781-032c-4a61-96f9-7b4385370269",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SOLVED EXAMPLE:\n",
      "Find the maximum and minimum values in a list\n",
      "List: [23, 45, 12, 67, 34, 89, 56]\n",
      "Maximum: 89\n",
      "Minimum: 12\n",
      "--------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "print(\"SOLVED EXAMPLE:\")\n",
    "print(\"Find the maximum and minimum values in a list\")\n",
    "numbers = [23, 45, 12, 67, 34, 89, 56]\n",
    "max_val = max(numbers)\n",
    "min_val = min(numbers)\n",
    "print(f\"List: {numbers}\")\n",
    "print(f\"Maximum: {max_val}\")\n",
    "print(f\"Minimum: {min_val}\")\n",
    "print(\"-\" * 50)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eeee25ef-5d64-46b9-aa91-514fcd291a8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Question 1: Create a list of first 10 square numbers\n",
      "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
     ]
    }
   ],
   "source": [
    "print(\"Question 1: Create a list of first 10 square numbers\")\n",
    "sqrs = [i**2 for i in range(1,11) ] \n",
    "print(sqrs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0c1b6c03-8d94-4520-b0ad-cee285dfcd00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 2: Find the sum of all even numbers in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
      "30\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 2: Find the sum of all even numbers in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\")\n",
    "num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "sum_of_even = sum([num for num in num if num%2==0])\n",
    "print(sum_of_even)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fb79a7ea-e196-46fa-836c-15bbbed6125e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 3: Remove duplicates from [1, 2, 2, 3, 4, 4, 5, 6, 6, 7]\n",
      "[1, 2, 3, 4, 5, 6, 7]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 3: Remove duplicates from [1, 2, 2, 3, 4, 4, 5, 6, 6, 7]\")\n",
    "num = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7]\n",
    "new_set = list(set(num))\n",
    "print(new_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d8a698e6-9650-4333-9700-45ed25eefff5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 4: Sort the list [64, 34, 25, 12, 22, 11, 90] in descending order\n",
      "[90, 64, 34, 25, 22, 12, 11]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 4: Sort the list [64, 34, 25, 12, 22, 11, 90] in descending order\")\n",
    "l = [64, 34, 25, 12, 22, 11, 90]\n",
    "l.sort(reverse=True)\n",
    "print(l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3591feb5-799e-4cfc-b6f4-8a9dd588896d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 5: Find the average of numbers in [15, 23, 31, 42, 56, 78, 91]\n",
      "48.0\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 5: Find the average of numbers in [15, 23, 31, 42, 56, 78, 91]\")\n",
    "num = [15, 23, 31, 42, 56, 78, 91]\n",
    "average = sum(num)/len(num)\n",
    "print(average)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "62276124-14f1-4772-b9de-77428cd364b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 6: Create a list of first 15 Fibonacci numbers\n",
      "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 6: Create a list of first 15 Fibonacci numbers\")\n",
    "fibonacci = [0,1]\n",
    "for i in range(2,15):\n",
    "    fibonacci.append(fibonacci[-1]+fibonacci[-2])\n",
    "print(fibonacci)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e9d44d69-0fa8-4f79-8f9c-73b30235d1cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 7: Find the second largest number in [45, 67, 23, 89, 12, 34, 78]\n",
      "Second largest number: 78\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 7: Find the second largest number in [45, 67, 23, 89, 12, 34, 78]\")\n",
    "num = [45, 67, 23, 89, 12, 34, 78]\n",
    "sorted_numbers = sorted(num, reverse=True)\n",
    "second_largest = sorted_numbers[1]\n",
    "print(\"Second largest number:\", second_largest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "edc63546-66b5-4e7e-823e-766a2b5d8557",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 8: Reverse the list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
      "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 8: Reverse the list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\")\n",
    "num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "reverse_num = num[::-1]\n",
    "print(reverse_num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9f8527df-eca1-466a-a16c-d17872b753cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 9: Count how many times 5 appears in [1, 5, 2, 5, 3, 5, 4, 5, 6]\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 9: Count how many times 5 appears in [1, 5, 2, 5, 3, 5, 4, 5, 6]\")\n",
    "num = [1, 5, 2, 5, 3, 5, 4, 5, 6]\n",
    "count_5 = num.count(5)\n",
    "print(count_5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "32ec38c9-dcd9-4305-be5d-0524133017cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 10: Create a list of prime numbers between 1 and 50\n",
      "Prime numbers between 1 and 50: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 10: Create a list of prime numbers between 1 and 50\")\n",
    "primes = []\n",
    "for num in range(2, 51):\n",
    "    is_prime = True\n",
    "    for i in range(2, int(num**0.5) + 1):\n",
    "        if num % i == 0:\n",
    "            is_prime = False\n",
    "            break\n",
    "    if is_prime:\n",
    "        primes.append(num)\n",
    "print(\"Prime numbers between 1 and 50:\", primes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "14401f1a-2c88-47d7-a85c-47a8e640284a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 11: Flatten nested list [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
      "Flattened list: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 11: Flatten nested list [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\")\n",
    "nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "flattened = [num for sublist in nested_list for num in sublist]\n",
    "print(\"Flattened list:\", flattened)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "18eb6304-bc2d-40ff-92ab-8befb9009c2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 12: Find common elements between [1, 2, 3, 4, 5] and [4, 5, 6, 7, 8]\n",
      "[4, 5]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 12: Find common elements between [1, 2, 3, 4, 5] and [4, 5, 6, 7, 8]\")\n",
    "s1 = [1,2,3,4,5]\n",
    "s2 = [4,5,6,7,8]\n",
    "common = list(set(s1) & set(s2))\n",
    "print(common)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "eab49e8b-f8d5-4e62-9d81-a116875872ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 13: Create a list of lists: [[1, 2], [3, 4], [5, 6]]\n",
      "List of lists: [[1, 2], [3, 4], [5, 6]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 13: Create a list of lists: [[1, 2], [3, 4], [5, 6]]\")\n",
    "list_of_lists = [[1, 2], [3, 4], [5, 6]]\n",
    "print(\"List of lists:\", list_of_lists)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "147a73e2-d72b-43e1-a3e2-7536d4bd2939",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 14: Find the sum of each sublist in [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
      "Sum of each sublist: [6, 15, 24]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 14: Find the sum of each sublist in [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\")\n",
    "nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "sums = [sum(sublist) for sublist in nested_list]\n",
    "print(\"Sum of each sublist:\", sums)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9ad7a077-bc49-4876-b555-a4bac8c7feae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 15: Transpose the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
      "[[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 15: Transpose the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\")\n",
    "matrix = [[1,2,3],\n",
    "          [4,5,6],\n",
    "          [7,8,9]]\n",
    "transpose = [list(row) for row in zip(*matrix)]\n",
    "print(transpose)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4c9af8b5-efe2-4147-85c8-880e2b409add",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 16: Find the maximum value in each sublist of [[1, 5, 3], [9, 2, 7], [4, 8, 6]]\n",
      "Maximum value in each sublist: [5, 9, 8]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 16: Find the maximum value in each sublist of [[1, 5, 3], [9, 2, 7], [4, 8, 6]]\")\n",
    "nested_list = [[1, 5, 3], [9, 2, 7], [4, 8, 6]]\n",
    "max_values = [max(sublist) for sublist in nested_list]\n",
    "print(\"Maximum value in each sublist:\", max_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "30796bab-2047-4003-8461-c3ade6d90252",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 17: Create a 3D list: [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n",
      "3D list: [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 17: Create a 3D list: [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\")\n",
    "list_3d = [[[1, 2], [3, 4]], \n",
    "           [[5, 6], [7, 8]]]\n",
    "print(\"3D list:\", list_3d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e402c020-bc8b-43ae-8908-e3724fcc4185",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 18: Find the sum of all elements in 3D list [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n",
      "Sum of all elements: 36\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 18: Find the sum of all elements in 3D list [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\")\n",
    "list_3d = [[[1, 2], [3, 4]], \n",
    "           [[5, 6], [7, 8]]]\n",
    "total_sum = sum(num for sublist1 in list_3d for sublist2 in sublist1 for num in sublist2)\n",
    "print(\"Sum of all elements:\", total_sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3b32fdba-048a-4b1f-b6a1-5d7dcf01dd6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 19: Extract all even numbers from nested list [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
      "Even numbers: [2, 4, 6, 8]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 19: Extract all even numbers from nested list [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\")\n",
    "nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "even_numbers = [num for sublist in nested_list for num in sublist if num % 2 == 0]\n",
    "print(\"Even numbers:\", even_numbers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c8439442-df1f-4496-964e-b2e66a4b9c56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 20: Create a list of mixed data types: [1, 'hello', 3.14, True, [1, 2, 3]]\n",
      "Mixed data type list: [1, 'hello', 3.14, True, [1, 2, 3]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 20: Create a list of mixed data types: [1, 'hello', 3.14, True, [1, 2, 3]]\")\n",
    "mixed_list = [1, 'hello', 3.14, True, [1, 2, 3]]\n",
    "print(\"Mixed data type list:\", mixed_list)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "67a928a6-0a37-454c-8062-9a06c379ec17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 21: Find the length of each string in ['apple', 'banana', 'cherry', 'date']\n",
      "Lengths of each string: [5, 6, 6, 4]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 21: Find the length of each string in ['apple', 'banana', 'cherry', 'date']\")\n",
    "fruits = ['apple', 'banana', 'cherry', 'date']\n",
    "lengths = [len(word) for word in fruits]\n",
    "print(\"Lengths of each string:\", lengths)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "87a5e766-3b1f-4743-8b5c-12cac09e8276",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 22: Create a list of tuples: [(1, 'a'), (2, 'b'), (3, 'c')]\n",
      "List of tuples: [(1, 'a'), (2, 'b'), (3, 'c')]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 22: Create a list of tuples: [(1, 'a'), (2, 'b'), (3, 'c')]\")\n",
    "list_of_tuples = [(1, 'a'), (2, 'b'), (3, 'c')]\n",
    "print(\"List of tuples:\", list_of_tuples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "dcf6abdd-239e-47a2-bbec-ea4e2bba287e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 23: Extract first element from each tuple in [(1, 'a'), (2, 'b'), (3, 'c')]\n",
      "First elements: [1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 23: Extract first element from each tuple in [(1, 'a'), (2, 'b'), (3, 'c')]\")\n",
    "tuples_list = [(1, 'a'), (2, 'b'), (3, 'c')]\n",
    "first_elements = [t[0] for t in tuples_list]\n",
    "print(\"First elements:\", first_elements)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5b7c7419-6283-4f6e-86de-35aab170b661",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 24: Create a list of dictionaries: [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]\n",
      "List of dictionaries: [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 24: Create a list of dictionaries: [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]\")\n",
    "list_of_dicts = [\n",
    "    {'name': 'Alice', 'age': 25},\n",
    "    {'name': 'Bob', 'age': 30}\n",
    "]\n",
    "print(\"List of dictionaries:\", list_of_dicts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "98df0643-9c47-4f80-85e8-b9a4446df079",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 25: Extract all 'name' values from list of dictionaries\n",
      "Names: ['Alice', 'Bob']\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 25: Extract all 'name' values from list of dictionaries\")\n",
    "list_of_dicts = [\n",
    "    {'name': 'Alice', 'age': 25},\n",
    "    {'name': 'Bob', 'age': 30}\n",
    "]\n",
    "names = [d['name'] for d in list_of_dicts]\n",
    "print(\"Names:\", names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3232275f-c172-4529-9dd5-175a37dafaed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 26: Find the person with maximum age in list of dictionaries\n",
      "Person with maximum age: {'name': 'Bob', 'age': 30}\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 26: Find the person with maximum age in list of dictionaries\")\n",
    "list_of_dicts = [\n",
    "    {'name': 'Alice', 'age': 25},\n",
    "    {'name': 'Bob', 'age': 30},\n",
    "    {'name': 'Charlie', 'age': 28}\n",
    "]\n",
    "oldest_person = max(list_of_dicts, key=lambda x: x['age'])\n",
    "print(\"Person with maximum age:\", oldest_person)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c9109fc2-f4ce-44df-add4-225a654b18dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 27: Create a 4D list: [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]]\n",
      "4D list: [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 27: Create a 4D list: [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]]\")\n",
    "list_4d = [\n",
    "    [[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n",
    "    [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]\n",
    "]\n",
    "print(\"4D list:\", list_4d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "78160600-fd42-460d-acc5-8caba75dc448",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 28: Find the maximum value in 4D list\n",
      "Maximum value in 4D list: 16\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 28: Find the maximum value in 4D list\")\n",
    "list_4d = [\n",
    "    [[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n",
    "    [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]\n",
    "]\n",
    "max_value = max(num for block in list_4d for subblock in block for row in subblock for num in row)\n",
    "print(\"Maximum value in 4D list:\", max_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "6e322dd2-13ea-4a17-aaca-d20d54c41a44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 29: Create a list of sets: [{1, 2, 3}, {4, 5, 6}, {7, 8, 9}]\n",
      "List of sets: [{1, 2, 3}, {4, 5, 6}, {8, 9, 7}]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 29: Create a list of sets: [{1, 2, 3}, {4, 5, 6}, {7, 8, 9}]\")\n",
    "list_of_sets = [{1, 2, 3}, {4, 5, 6}, {7, 8, 9}]\n",
    "print(\"List of sets:\", list_of_sets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "d263e518-da97-49d3-a32b-3cc199c0dac9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 30: Find the union of all sets in list of sets\n",
      "Union of all sets: {1, 2, 3, 4, 5, 6, 7, 8, 9}\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 30: Find the union of all sets in list of sets\")\n",
    "list_of_sets = [{1, 2, 3}, {4, 5, 6}, {7, 8, 9}]\n",
    "union_set = set().union(*list_of_sets)\n",
    "print(\"Union of all sets:\", union_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "6b1204ca-b41d-4be6-9515-150e14e8e18c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 31: Create a list of complex numbers: [1+2j, 3+4j, 5+6j]\n",
      "List of complex numbers: [(1+2j), (3+4j), (5+6j)]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 31: Create a list of complex numbers: [1+2j, 3+4j, 5+6j]\")\n",
    "complex_list = [1+2j, 3+4j, 5+6j]\n",
    "print(\"List of complex numbers:\", complex_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "bfedaa65-e23e-4232-a24f-ffd8464a50bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 32: Find the magnitude of each complex number in list\n",
      "Magnitudes of complex numbers: [2.23606797749979, 5.0, 7.810249675906654]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 32: Find the magnitude of each complex number in list\")\n",
    "complex_list = [1+2j, 3+4j, 5+6j]\n",
    "magnitudes = [abs(c) for c in complex_list]\n",
    "print(\"Magnitudes of complex numbers:\", magnitudes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "bea59f72-c61f-4756-8ed2-7f56587385c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 33: Create a nested list with different levels: [1, [2, 3], [4, [5, 6]], 7]\n",
      "Nested list: [1, [2, 3], [4, [5, 6]], 7]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 33: Create a nested list with different levels: [1, [2, 3], [4, [5, 6]], 7]\")\n",
    "nested_list = [1, [2, 3], [4, [5, 6]], 7]\n",
    "print(\"Nested list:\", nested_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d6ee822c-f184-4fb2-b59c-af1bd553e529",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 34: Count the depth of nesting in [1, [2, 3], [4, [5, 6]], 7]\n",
      "Depth of nesting: 3\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 34: Count the depth of nesting in [1, [2, 3], [4, [5, 6]], 7]\")\n",
    "nested_list = [1, [2, 3], [4, [5, 6]], 7]\n",
    "def depth(lst):\n",
    "    if isinstance(lst, list):\n",
    "        return 1 + max((depth(item) for item in lst), default=0)\n",
    "    else:\n",
    "        return 0\n",
    "print(\"Depth of nesting:\", depth(nested_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "b936f13a-3e19-4000-948c-740396cb9433",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 35: Create a list of functions: [len, str, int, float]\n",
      "List of functions: [<built-in function len>, <class 'str'>, <class 'int'>, <class 'float'>]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 35: Create a list of functions: [len, str, int, float]\")\n",
    "functions_list = [len, str, int, float]\n",
    "print(\"List of functions:\", functions_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "d38194c5-8d35-485e-b37a-fd9c0d9d81bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 36: Apply each function in list to string '123'\n",
      "Results after applying functions: [3, '123', 123, 123.0]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 36: Apply each function in list to string '123'\")\n",
    "functions_list = [len, str, int, float]\n",
    "value = \"123\"\n",
    "results = [func(value) for func in functions_list]\n",
    "print(\"Results after applying functions:\", results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "14fd3ea2-2a7f-487e-9850-3371f28d6eed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 37: Create a list of lambda functions: [lambda x: x*2, lambda x: x**2, lambda x: x+1]\n",
      "Results after applying lambdas to 5: [10, 25, 6]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 37: Create a list of lambda functions: [lambda x: x*2, lambda x: x**2, lambda x: x+1]\")\n",
    "lambda_list = [lambda x: x*2, lambda x: x**2, lambda x: x+1]\n",
    "results = [func(5) for func in lambda_list]\n",
    "print(\"Results after applying lambdas to 5:\", results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "5aded02e-5b03-40b9-bab0-372896ac6c5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 38: Apply each lambda function to 5\n",
      "Results: [10, 25, 6]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 38: Apply each lambda function to 5\")\n",
    "lambda_list = [lambda x: x*2, lambda x: x**2, lambda x: x+1]\n",
    "results = [func(5) for func in lambda_list]\n",
    "print(\"Results:\", results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4c14a93b-3662-4893-8175-8ee29c0c3700",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 39: Create a list of classes: [list, dict, set, tuple]\n",
      "List of classes: [<class 'list'>, <class 'dict'>, <class 'set'>, <class 'tuple'>]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 39: Create a list of classes: [list, dict, set, tuple]\")\n",
    "class_list = [list, dict, set, tuple]\n",
    "print(\"List of classes:\", class_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "92d2be33-23e0-43e2-90ac-c5e66a387da8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 40: Create instances of each class in list\n",
      "Instances of each class: [[], {}, set(), ()]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 40: Create instances of each class in list\")\n",
    "class_list = [list, dict, set, tuple]\n",
    "instances = [cls() for cls in class_list]\n",
    "print(\"Instances of each class:\", instances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "050f3eb8-1710-4585-b8de-95b173a4e924",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 41: Create a list of None values: [None, None, None, None]\n",
      "List of None values: [None, None, None, None]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 41: Create a list of None values: [None, None, None, None]\")\n",
    "none_list = [None, None, None, None]\n",
    "print(\"List of None values:\", none_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "655286f5-23cb-4927-a71a-c96833a22d2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 42: Replace all None values with 0 in list\n",
      "List after replacing None with 0: [0, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 42: Replace all None values with 0 in list\")\n",
    "none_list = [None, None, None, None]\n",
    "replaced_list = [0 if x is None else x for x in none_list]\n",
    "print(\"List after replacing None with 0:\", replaced_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "39964ecf-c37c-4306-9c04-86119c49b4d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 43: Create a list of boolean values: [True, False, True, False]\n",
      "Boolean list: [True, False, True, False]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 43: Create a list of boolean values: [True, False, True, False]\")\n",
    "bool_list = [True, False, True, False]\n",
    "print(\"Boolean list:\", bool_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "bce191b3-a93a-44ed-9215-32a5b414c8ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 44: Count True values in boolean list\n",
      "Number of True values: 2\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 44: Count True values in boolean list\")\n",
    "bool_list = [True, False, True, False]\n",
    "count_true = bool_list.count(True)\n",
    "print(\"Number of True values:\", count_true)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "218ba005-893d-4080-a2f5-2199835f6602",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 45: Create a list of ranges: [range(3), range(5), range(2)]\n",
      "List of ranges: [range(0, 3), range(0, 5), range(0, 2)]\n",
      "Expanded ranges: [[0, 1, 2], [0, 1, 2, 3, 4], [0, 1]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 45: Create a list of ranges: [range(3), range(5), range(2)]\")\n",
    "ranges = [range(3), range(5), range(2)]\n",
    "print(\"List of ranges:\", ranges)\n",
    "expanded = [list(r) for r in ranges]\n",
    "print(\"Expanded ranges:\", expanded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "399ccdb3-fcd9-407a-82ca-a983523c34d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 46: Convert each range to list\n",
      "Converted ranges: [[0, 1, 2], [0, 1, 2, 3, 4], [0, 1]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 46: Convert each range to list\")\n",
    "ranges = [range(3), range(5), range(2)]\n",
    "converted = [list(r) for r in ranges]\n",
    "print(\"Converted ranges:\", converted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "0e8d7a11-b781-426d-983a-87a56df3bff4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 47: Create a list of generators: [( for x in range(3)), (x for x in range(5))]\n",
      "List of generators created: [<generator object <genexpr> at 0x0000029DDB6E5C00>, <generator object <genexpr> at 0x0000029DDB6E6140>]\n",
      "Values from generator1: [0, 1, 2]\n",
      "Values from generator2: [0, 1, 2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 47: Create a list of generators: [( for x in range(3)), (x for x in range(5))]\")\n",
    "generators = [(x for x in range(3)), (x for x in range(5))]\n",
    "print(\"List of generators created:\", generators)\n",
    "for i, gen in enumerate(generators, start=1):\n",
    "    print(f\"Values from generator{i}:\",list(gen))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "0c446850-8457-4906-9add-acaea8da7770",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 48: Convert each generator to list\n",
      "Converted lists: [[0, 1, 2], [0, 1, 2, 3, 4]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 48: Convert each generator to list\")\n",
    "generators = [(x for x in range(3)), (x for x in range(5))]\n",
    "lists_from_generators = [list(gen) for gen in generators]\n",
    "print(\"Converted lists:\", lists_from_generators)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "2dd621f1-c3d9-4827-863d-1c503cbeba13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 49: Create a list of iterators: [iter([1, 2, 3]), iter([4, 5, 6])]\n",
      "List of iterators created: [<list_iterator object at 0x0000029DDB19D5A0>, <list_iterator object at 0x0000029DDB19CDF0>]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 49: Create a list of iterators: [iter([1, 2, 3]), iter([4, 5, 6])]\")\n",
    "iterators = [iter([1, 2, 3]), iter([4, 5, 6])]\n",
    "print(\"List of iterators created:\", iterators)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "ab51403a-b0b1-4a78-99ae-4eba344e2264",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Question 50: Extract all elements from each iterator\n",
      "Extracted elements from each iterator: [[1, 2, 3], [4, 5, 6]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nQuestion 50: Extract all elements from each iterator\")\n",
    "iterators = [iter([1, 2, 3]), iter([4, 5, 6])]\n",
    "extracted_elements = [list(it) for it in iterators]\n",
    "print(\"Extracted elements from each iterator:\", extracted_elements)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d47a77b-96d2-4fe5-a198-908834cfc31a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b47635e-2b15-41b0-aab1-771b3878153c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
